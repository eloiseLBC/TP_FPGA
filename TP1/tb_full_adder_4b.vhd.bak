library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tb_full_adder_4b is
end tb_full_adder_4b;

architecture behavior of tb_full_adder_4b is
    signal Cin      : std_logic;
    signal A0, A1, A2, A3 : std_logic;
    signal B0, B1, B2, B3 : std_logic;
    signal S0, S1, S2, S3 : std_logic;
    signal Cout     : std_logic;

    -- Signaux auxiliaires pour faciliter l'affichage et les assertions
    signal A, B, Sum : unsigned(3 downto 0);
    signal CarryOut_expected : std_logic;

begin

    -- Instanciation du composant à tester
    UUT: entity work.full_adder_4b
        port map (
            Cin => Cin,
            A0 => A0, A1 => A1, A2 => A2, A3 => A3,
            B0 => B0, B1 => B1, B2 => B2, B3 => B3,
            S0 => S0, S1 => S1, S2 => S2, S3 => S3,
            Cout => Cout
        );

    -- Relier les bits à des vecteurs pour les comparaisons
    A <= A3 & A2 & A1 & A0;
    B <= B3 & B2 & B1 & B0;
    Sum <= S3 & S2 & S1 & S0;

    stim_proc: process
        variable expected_result : unsigned(4 downto 0);
    begin
        -- Liste des cas à tester (on peut en ajouter d'autres facilement)

        -- Cas 1 : 0 + 0 + 0 = 0000 Cout=0
        Cin <= '0'; A <= "0000"; B <= "0000";
        wait for 10 ns;
        expected_result := ('0' & A) + ('0' & B) + to_unsigned(0, 5);
        assert Sum = expected_result(3 downto 0)
            report "Erreur somme pour 0 + 0 + 0" severity error;
        assert Cout = expected_result(4)
            report "Erreur carry pour 0 + 0 + 0" severity error;

        -- Cas 2 : 1 + 1 + 1 = 0011 Cout=0
        Cin <= '1'; A <= "0001"; B <= "0001";
        wait for 10 ns;
        expected_result := ('0' & A) + ('0' & B) + to_unsigned(1, 5);
        assert Sum = expected_result(3 downto 0)
            report "Erreur somme pour 1 + 1 + 1" severity error;
        assert Cout = expected_result(4)
            report "Erreur carry pour 1 + 1 + 1" severity error;

        -- Cas 3 : 15 + 1 + 0 = 10000 Cout=1
        Cin <= '0'; A <= "1111"; B <= "0001";
        wait for 10 ns;
        expected_result := ('0' & A) + ('0' & B) + to_unsigned(0, 5);
        assert Sum = expected_result(3 downto 0)
            report "Erreur somme pour 15 + 1 + 0" severity error;
        assert Cout = expected_result(4)
            report "Erreur carry pour 15 + 1 + 0" severity error;

        -- Cas 4 : 8 + 7 + 1 = 10000 Cout=1
        Cin <= '1'; A <= "1000"; B <= "0111";
        wait for 10 ns;
        expected_result := ('0' & A) + ('0' & B) + to_unsigned(1, 5);
        assert Sum = expected_result(3 downto 0)
            report "Erreur somme pour 8 + 7 + 1" severity error;
        assert Cout = expected_result(4)
            report "Erreur carry pour 8 + 7 + 1" severity error;

        -- Cas 5 : 5 + 5 + 0 = 1010 Cout=0
        Cin <= '0'; A <= "0101"; B <= "0101";
        wait for 10 ns;
        expected_result := ('0' & A) + ('0' & B) + to_unsigned(0, 5);
        assert Sum = expected_result(3 downto 0)
            report "Erreur somme pour 5 + 5 + 0" severity error;
        assert Cout = expected_result(4)
            report "Erreur carry pour 5 + 5 + 0" severity error;

        -- Cas 6 : 9 + 6 + 1 = 10000 Cout=1
        Cin <= '1'; A <= "1001"; B <= "0110";
        wait for 10 ns;
        expected_result := ('0' & A) + ('0' & B) + to_unsigned(1, 5);
        assert Sum = expected_result(3 downto 0)
            report "Erreur somme pour 9 + 6 + 1" severity error;
        assert Cout = expected_result(4)
            report "Erreur carry pour 9 + 6 + 1" severity error;

        wait;
    end process;

end behavior;
